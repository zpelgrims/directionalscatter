  // modified version of RandomBitmap.osl shader by Zap Andersson which allows setting a discretized angle per-stroke
  // for all information on this shader: http://zenopelgrims.com/directional-image-scattering/

  color TextureFetch(string filename, point lp, output float a) {
    color rgb = texture(filename, lp[0], 1.0-lp[1], "alpha", a, "wrap", "clamp");
    int channels = 3;
    gettextureinfo(filename, "channels", channels);
    if (channels <= 3) a = 1.0;
    return rgb;
  }


  shader directional_scatter [[ string help  = "Randomly place (and alpha blend) a set of bitmaps on top of something else", string label = "Randomized Bitmaps" ]] (
    vector uv = vector(u, v, 0),
    color  input_background = 0.0 [[ string help="The input color on top of which everything else is put. Thia allows cascading multiple RandomBitmap on top of each other easily..." ]], 	
    float  input_alpha = 1.0 [[ string help="The input alpha on top of which everything else is put. Thia allows cascading multiple RandomBitmap on top of each other easily..." ]], 	
    
    int    number_of_files = 1 [[ string label = "Number of Files", int min = 1, int max = 5 ]],
    string filename0 = "" [[ string label="File name 0", string help="The name of the bitmap to place randomly" ]], 
    string filename1 = "" [[ string label="File name 1", string help="The name of the bitmap to place randomly" ]], 
    string filename2 = "" [[ string label="File name 2", string help="The name of the bitmap to place randomly" ]], 
    string filename3 = "" [[ string label="File name 3", string help="The name of the bitmap to place randomly" ]], 
    string filename4 = "" [[ string label="File name 4", string help="The name of the bitmap to place randomly" ]], 
    string filename5 = "" [[ string label="File name 5", string help="The name of the bitmap to place randomly" ]],
    string input_image_gradient = "";
    
    int    seed = 1 [[ string help="The random seed" ]], 
    vector probability = vector(1.0, 0.0, 0.1) [[ string help="Three values: The probability a bitmap will show up, the randomness of the variation in the probability, and the scale of said randomness", float min = 0.0, float max = 1.0 ]], 
    vector position_randomness = vector(0.0,0.0,0.0) [[ string help="Position randomness. For large numbers you may have to turn overlap up, but impacts performance! Note: the Z value is not used." ]], 
    vector scale_min = vector(2.0, 0.5, 0.0) [[ string help="The scale randomness. For large scales you may have to turn overlap up, but impacts performance! Note: the Z value is not used.", float min = 0.0, float max = 10.0 ]], 
    vector scale_max = vector(2.0, 0.5, 0.0) [[ string help="The scale randomness. For large scales you may have to turn overlap up, but impacts performance! Note: the Z value is not used.", float min = 0.0, float max = 10.0 ]], 	
    int    uniform_scale = 1 [[ string help="If enabled, U and V scales in sync with each other, if off, they scale independently" ]], 	
    vector hsv_min   = vector(0.0, 1.0, 0.0) [[ string help="Hue/Saturation/Value randomness. Start range of hue shift and saturation/value scaling", float min = -2.0, float max =  2.0 ]],	
    vector hsv_max   = vector(0.0, 1.0, 1.0) [[ string help="Hue/Saturation/Value randomness. End range of hue shift and saturation/value scaling", float min = -2.0, float max =  2.0 ]],		
    float  alpha_min  = 1.0 [[ string help="The Alpha randomness. Minimum multiplier of alpha." , float min =  0.0, float max =  1.0 ]],	
    float  alpha_max  = 1.0 [[ string help="The Alpha randomness. Maximum multiplier of alpha." , float min =  0.0, float max =  1.0 ]],			 			
    int    overlap  = 2 [[ string help="For very large scales or position shifts, you may see cut-off textures. This means the shader may need to look further into more neighbouring cells. Increasing this reduces performance A LOT so ONLY do this if absolutely necessary!", int min=0, int max=5 ]],
    float  freq = 100.0,
    float  extra_rotation = 90.0,
    float  magnitude_scale = 30.0,
    float  minimum_magnitude = 4.5,


    output color Out = input_background,
    output float Alpha = input_alpha,
  )
  {
    // Adjust behaviour based on version
    int oslversion = 0;
    getattribute("osl:version", oslversion);

    vector uvfreq = uv * freq;
    int ix = int(floor(uvfreq[0]));
    int iy = int(floor(uvfreq[1]));
    float fx = uvfreq[0] - ix;
    float fy = uvfreq[1] - iy;
    float gamma = 1.0;
    
    // Temporary workaround for color space issues
    if (!endswith(filename0, ".exr") &&
        !endswith(filename0, ".EXR") &&
        !endswith(filename0, ".hdr") &&
        !endswith(filename0, ".HDR") &&
        !endswith(filename0, ".tx")  &&
        !endswith(filename0, ".TX"))
    {
      gamma = 2.2; //srgb approx
    }

    for (int xx = -overlap; xx <= overlap; xx++) {
      for(int yy = -overlap; yy <= overlap; yy++) {
        
        point rndpoint = point(ix + xx, iy + yy, seed); // The point used for all the randomness

        if (oslversion >= 11000) { // Compensate for old cellnoise behaviour			
          rndpoint[0] = rndpoint[0] < 0 ? rndpoint[0]-1 : rndpoint[0];
          rndpoint[1] = rndpoint[1] < 0 ? rndpoint[1]-1 : rndpoint[1];
          rndpoint[2] = rndpoint[2] < 0 ? rndpoint[2]-1 : rndpoint[2];
        }
        
        // Random pos data
        point pos = ((noise("cell", rndpoint, 0) - vector(0.5,0.5,0.0)) * vector(position_randomness[0], position_randomness[1], 1.0));
        point lp  = point(fx-xx, fy-yy, 0) - pos; // The actual lookup point
        float prob = probability[0] + noise("perlin", rndpoint * probability[2]) * probability[1];
        
        if (pos[2] < prob) {
          point  scr = noise("cell", rndpoint, 1); // Scale and rotation randomness
          int    pic = int((float)noise("cell", rndpoint, 15) * 100) % number_of_files;

          float sx = 1.0, sy = 1.0; // XY scaling tweak
          float scaleX = sx * mix(scale_min[0], scale_max[0], scr[0]);
          float scaleY = sy * mix(scale_min[1], scale_max[1], scr[uniform_scale?0:1]);

          color gradient_smoothed = (texture(input_image_gradient, rndpoint[0]/freq, 1.0 - rndpoint[1]/freq) - 0.5) * 2.0;
          gradient_smoothed /= 15.36;
          float angle_deg = degrees(atan2(gradient_smoothed[1], gradient_smoothed[0]));
          float magnitude = hypot(gradient_smoothed[1], gradient_smoothed[0]);

          if (sqrt(magnitude)*100.0 > minimum_magnitude){
            scaleX = scaleX + scaleX * sqrt(magnitude)*magnitude_scale;
            lp -= 0.5;
            lp  = rotate(lp, radians(angle_deg + extra_rotation), point(0,0,0), vector(0,0,1));
            lp /= vector(scaleX, scaleY, 1.0);
            lp += 0.5;
                    
            if (lp[0] >= 0.0 && lp[0] < 1.0 && lp[1] >= 0.0 && lp[1] < 1.0) {																			
              color rgb; float a = 1.0;
              
              if (pic == 0) rgb = TextureFetch(filename0, lp, a); 
              else if (pic == 1) rgb = TextureFetch(filename1, lp, a); 
              else if (pic == 2) rgb = TextureFetch(filename2, lp, a); 
              else if (pic == 3) rgb = TextureFetch(filename3, lp, a); 			
              else if (pic == 4) rgb = TextureFetch(filename4, lp, a); 
              else if (pic == 5) rgb = TextureFetch(filename5, lp, a);
              
              if (a > 0.0) {
                point clr = noise("cell", rndpoint, 2); // Color randomness
                point arr = noise("cell", rndpoint, 3); // Alpha randomness
                
                if (gamma != 1.0) rgb = pow(rgb, gamma);
                
                vector hsvTweak = mix(hsv_min, hsv_max, clr);
                float ar = mix(alpha_min, alpha_max, arr[0]);
                
                color hsv = transformc("rgb", "hsv", rgb);
                hsv[0] += hsvTweak[0]; // Offset the hue
                hsv[1] *= hsvTweak[1]; // Scale the saturation
                hsv[2] *= hsvTweak[2]; // Scale the value
                rgb = transformc("hsv", "rgb", hsv);					
                          
                // Apply alpha randomness
                rgb *= ar; a *= ar;
              }

              Alpha = 1.0 - ((1.0-Alpha)*(1.0-a));
              Out = Out * (1.0-a) + rgb;
            }			
          }
        }
      }
    }		
  }